@startuml
title Рекурсивное вычисление скалярного произведения векторов
skinparam backgroundColor white
skinparam node {
    BackgroundColor white
    BorderColor black
    FontSize 12
}

node "func(x, y, 7)" as call1 {
    node "1. s = 7\n2. x[6] * y[6] = 1 * 7\n3. return 7 + func(x, y, 6)" as step1
}

node "func(x, y, 6)" as call2 {
    node "1. s = 6\n2. x[5] * y[5] = 2 * (-6)\n3. return -12 + func(x, y, 5)" as step2
}

node "func(x, y, 5)" as call3 {
    node "1. s = 5\n2. x[4] * y[4] = 1 * 5\n3. return 5 + func(x, y, 4)" as step3
}

node "func(x, y, 4)" as call4 {
    node "1. s = 4\n2. x[3] * y[3] = 2 * 4\n3. return 8 + func(x, y, 3)" as step4
}

node "func(x, y, 3)" as call5 {
    node "1. s = 3\n2. x[2] * y[2] = 1 * 3\n3. return 3 + func(x, y, 2)" as step5
}

node "func(x, y, 2)" as call6 {
    node "1. s = 2\n2. x[1] * y[1] = 2 * (-2)\n3. return -4 + func(x, y, 1)" as step6
}

node "func(x, y, 1)" as call7 {
    node "1. s = 1\n2. x[0] * y[0] = 1 * 1\n3. return 1 + func(x, y, 0)" as step7
}

node "func(x, y, 0)" as call8 {
    node "s = 0\nreturn 0" as step8
}

call1 -down-> call2
call2 -down-> call3
call3 -down-> call4
call4 -down-> call5
call5 -down-> call6
call6 -down-> call7
call7 -down-> call8

legend right
    Векторы:
    x = [1, 2, 1, 2, 1, 2, 1]
    y = [1,-2, 3, 4, 5,-6, 7]
    
    Формула:
    Скалярное произведение = 
    Σ(x[i] * y[i])
end legend

@enduml
